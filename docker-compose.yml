services:

  #  Pulled services
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    networks:
      - kafka-network
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-log:/var/lib/zookeeper/log

  kafka:
    image: confluentinc/cp-kafka:latest
    networks:
      - kafka-network
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # Define all listener names here
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_DOCKER://0.0.0.0:29092
      # Define advertised listeners (subset of KAFKA_LISTENERS)
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_DOCKER://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka-data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    restart: always

  kafka-connect:
    image: debezium/connect:2.7.3.Final
    networks:
      - kafka-network
    ports:
      - "8083:8083"    # Kafka Connect REST API
    environment:
      BOOTSTRAP_SERVERS: kafka:29092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: my_connect_configs
      OFFSET_STORAGE_TOPIC: my_connect_offsets
      STATUS_STORAGE_TOPIC: my_connect_status

      # Use JSON converters (you can also use Avro if you'd like)
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      VALUE_CONVERTER_SCHEMAS_ENABLE: "false"

      # By default, Debezium connector plugins live in /kafka/connect
      # This image already includes Debezium for PostgreSQL
      PLUGIN_PATH: /kafka/libs

      # Kafka Connect internal logging:
      #   https://docs.confluent.io/platform/current/connect/logging.html
      #   (Adjust to your preference)
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"

    depends_on:
      - kafka
      - zookeeper
      - postgres
    restart: always

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    networks:
      - kafka-network
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka

  postgres:
    image: postgres:15
    networks:
      - kafka-network
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD

    volumes:
      - ./postgres_init.sql:/docker-entrypoint-initdb.d/postgres_init.sql
      - postgres-data:/var/lib/postgresql/data
    restart: always

  redis:
    image: redis:7-alpine
    networks:
      - kafka-network
    ports:
      - "6379:6379"
    restart: always

  redis-insight:
    image: redislabs/redisinsight:latest
    networks:
      - kafka-network
    ports:
      - "5540:5540"
    restart: always
    depends_on:
      - redis
    volumes:
      - redis-insight:/data







  #  Built services
  order:
    build:
      context: .
      dockerfile: order/Dockerfile
    image: myorg/order-service:latest
    networks:
      - kafka-network
    ports:
      - "8081:8081"
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/microservices_demo_db_order
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      - kafka
      - postgres

  inventory:
    build:
      context: .
      dockerfile: inventory/Dockerfile
    image: myorg/inventory-service:latest
    networks:
      - kafka-network
    ports:
      - "8082:8082"
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/microservices_demo_db_inventory
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      - kafka
      - postgres

# Configurations
networks:
  kafka-network:
    driver: bridge

volumes:
  kafka-data:
  zookeeper-data:
  zookeeper-log:
  postgres-data:
  redis-insight:
